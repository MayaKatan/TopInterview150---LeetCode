"""
Given a pattern and a string s, find if s follows the same pattern.
Here follow means a full match, such that there is a bijection between a letter in pattern and a non-empty word in s. Specifically:
Each letter in pattern maps to exactly one unique word in s.
Each unique word in s maps to exactly one letter in pattern.
No two letters map to the same word, and no two words map to the same letter.
 
Example 1:
Input: pattern = "abba", s = "dog cat cat dog"
Output: true
Explanation:
The bijection can be established as:
'a' maps to "dog".
'b' maps to "cat".

Example 2:
Input: pattern = "abba", s = "dog cat cat fish"
Output: false

Example 3:
Input: pattern = "aaaa", s = "dog cat cat dog"
Output: false
"""

class Solution(object):
    def wordPattern(self, pattern, s):
        dictionary_ch = {} #for pattern 
        dictionary_word ={} #for s
        if len(s.split()) != len(pattern):
            return False
        for ch, word in zip(pattern, s.split()):
            if ch not in dictionary_ch and word not in dictionary_word: 
                dictionary_ch[ch] = word
                dictionary_word[word] = ch
            if dictionary_ch.get(ch) != word or dictionary_word.get(word) != ch:
                return False
        return True
